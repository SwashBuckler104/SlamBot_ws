amcl:
  ros__parameters:
    use_sim_time: True
    alpha1: 0.2
    alpha2: 0.2
    alpha3: 0.2
    alpha4: 0.2
    alpha5: 0.2
    base_frame_id: "base_link"
    beam_skip_distance: 0.5
    beam_skip_error_threshold: 0.9
    beam_skip_threshold: 0.3
    do_beamskip: false
    global_frame_id: "map"
    lambda_short: 0.1
    laser_likelihood_max_dist: 2.0
    laser_max_range: 12.0  
    laser_min_range: 0.12 
    laser_model_type: "likelihood_field"
    max_beams: 60
    max_particles: 2000
    min_particles: 500
    odom_frame_id: "odom"
    pf_err: 0.05
    pf_z: 0.99
    recovery_alpha_fast: 0.0
    recovery_alpha_slow: 0.0
    resample_interval: 1
    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    save_pose_rate: 0.5
    sigma_hit: 0.2
    tf_broadcast: true
    transform_tolerance: 1.0
    update_min_a: 0.2
    update_min_d: 0.25
    z_hit: 0.5
    z_max: 0.05
    z_rand: 0.5
    z_short: 0.05
    # laser_scan_topic: ""
    laser_scan_topic: "scan"  

bt_navigator: 
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: odom
    bt_loop_duration: 10
    filter_duration: 0.3
    default_server_timeout: 20
    wait_for_service_timeout: 1000
    navigators: ["navigate_to_pose", "navigate_through_poses"]
    navigate_to_pose:
      plugin: "nav2_bt_navigator::NavigateToPoseNavigator"
    navigate_through_poses:
      plugin: "nav2_bt_navigator::NavigateThroughPosesNavigator"
    default_bt_xml_filename: "install/nav2_bt_navigator/share/nav2_bt_navigator/behavior_trees/navigate_w_replanning_and_recovery.xml"

controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    costmap_update_timeout: 0.30
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugins: ["progress_checker"]
    goal_checker_plugins: ["general_goal_checker"]
    controller_plugins: ["FollowPath"]
    use_realtime_priority: false

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    
    # Goal checker parameters
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25
    
    # Controller plugin - DWB tuned for slambot
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      # Slambot velocity limits
      min_vel_x: 0.0
      max_vel_x: 0.26      # Your current max linear velocity
      max_vel_theta: 1.0   # Your current max angular velocity
      min_speed_xy: 0.0
      max_speed_xy: 0.26
      min_speed_theta: 0.0
      # Slambot acceleration limits  
      acc_lim_x: 2.5       # Your current linear acceleration
      acc_lim_theta: 3.2   # Your current angular acceleration
      acc_lim_y: 0.0
      decel_lim_x: -2.5
      decel_lim_theta: -3.2
      decel_lim_y: 0.0
      # DWB specific parameters
      vx_samples: 20
      vy_samples: 1        # Differential drive - no lateral movement
      vth_samples: 20
      sim_time: 1.5        # Trajectory simulation time
      sim_granularity: 0.025
      sim_period: 0.1
      discretize_by_time: false
      angular_sim_granularity: 0.025
      transform_tolerance: 0.2
      trans_stopped_velocity: 0.05
      theta_stopped_velocity: 0.05
      short_circuit_trajectory_evaluation: true
      stateful: true
      # Critics for path following and obstacle avoidance
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      BaseObstacle.scale: 0.02
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.325
      PathDist.scale: 24.0
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.325
      GoalDist.scale: 24.0
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0

# Online example of controller_server parameters:
# controller_server:
#   ros__parameters:
#     # controller server parameters (see Controller Server for more info)
#     controller_frequency: 20.0
#     min_x_velocity_threshold: 0.001
#     min_y_velocity_threshold: 0.5
#     min_theta_velocity_threshold: 0.001
#     progress_checker_plugins: ["progress_checker"] # progress_checker_plugin: "progress_checker" For Humble and older
#     goal_checker_plugins: ["goal_checker"]
#     controller_plugins: ["FollowPath"]
#     progress_checker:
#       plugin: "nav2_controller::SimpleProgressChecker"
#       required_movement_radius: 0.5
#       movement_time_allowance: 10.0
#     goal_checker:
#       plugin: "nav2_controller::SimpleGoalChecker"
#       xy_goal_tolerance: 0.25
#       yaw_goal_tolerance: 0.25
#       stateful: True
#     # DWB controller parameters
#     FollowPath:
#       plugin: "dwb_core::DWBLocalPlanner"
#       debug_trajectory_details: True
#       min_vel_x: 0.0
#       min_vel_y: 0.0
#       max_vel_x: 0.26
#       max_vel_y: 0.0
#       max_vel_theta: 1.0
#       min_speed_xy: 0.0
#       max_speed_xy: 0.26
#       min_speed_theta: 0.0
#       acc_lim_x: 2.5
#       acc_lim_y: 0.0
#       acc_lim_theta: 3.2
#       decel_lim_x: -2.5
#       decel_lim_y: 0.0
#       decel_lim_theta: -3.2
#       vx_samples: 20
#       vy_samples: 5
#       vtheta_samples: 20
#       sim_time: 1.7
#       linear_granularity: 0.05
#       angular_granularity: 0.025
#       transform_tolerance: 0.2
#       xy_goal_tolerance: 0.25
#       trans_stopped_velocity: 0.25
#       short_circuit_trajectory_evaluation: True
#       limit_vel_cmd_in_traj: False
#       stateful: True
#       critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
#       BaseObstacle.scale: 0.02
#       PathAlign.scale: 32.0
#       GoalAlign.scale: 24.0
#       PathAlign.forward_point_distance: 0.1
#       GoalAlign.forward_point_distance: 0.1
#       PathDist.scale: 32.0
#       GoalDist.scale: 24.0
#       RotateToGoal.scale: 32.0
#       RotateToGoal.slowing_factor: 5.0
#       RotateToGoal.lookahead_time: -1.0

local_costmap:
  local_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      rolling_window: true
      width: 4              # //Change
      height: 4             # //Change  
      resolution: 0.05
      # Slambot dimensions: 0.6m x 0.3m base
      robot_radius: 0.36       # track_width / base_link ??
      plugins: ["voxel_layer", "inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.8  
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.5   
          raytrace_min_range: 0.0
          obstacle_max_range: 3.0    
          obstacle_min_range: 0.0
      always_send_full_costmap: True

global_costmap:
  global_costmap:
    ros__parameters:
      use_sim_time: True
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      # Slambot dimensions: 0.6m x 0.3m base
      robot_radius: 0.36
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 6.0    
          raytrace_min_range: 0.0
          obstacle_max_range: 5.0    
          obstacle_min_range: 0.0
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.8  # Increased for larger robot
      always_send_full_costmap: True

# The yaml_filename does not need to be specified since it going to be set by defaults in launch
# map_server:
#   ros__parameters:
#     use_sim_time: True
#     yaml_filename: "src/slambot_navigation/maps/map.yaml"

planner_server:
  ros__parameters:
    use_sim_time: True
    expected_planner_frequency: 20.0
    planner_plugins: ["GridBased"]
    costmap_update_timeout: 1.0
    GridBased:
      plugin: "nav2_navfn_planner::NavfnPlanner"
      tolerance: 0.5
      use_astar: true
      allow_unknown: true

behavior_server:
  ros__parameters:
    use_sim_time: True
    local_costmap_topic: local_costmap/costmap_raw
    global_costmap_topic: global_costmap/costmap_raw
    local_footprint_topic: local_costmap/published_footprint
    global_footprint_topic: global_costmap/published_footprint
    cycle_frequency: 10.0
    behavior_plugins: ["spin", "backup", "drive_on_heading", "wait"]
    spin:
      plugin: "nav2_behaviors::Spin"
    backup:
      plugin: "nav2_behaviors::BackUp"
      backup_dist: -0.15     # Backup distance for slambot
      backup_speed: 0.025    # Slow backup speed
    drive_on_heading:
      plugin: "nav2_behaviors::DriveOnHeading"
    wait:
      plugin: "nav2_behaviors::Wait"
    local_frame: odom
    global_frame: map
    robot_base_frame: base_link
    transform_tolerance: 0.1
    simulate_ahead_time: 2.0
    # Slambot rotation parameters
    max_rotational_vel: 1.0      
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2      

waypoint_follower:
  ros__parameters:
    use_sim_time: True
    loop_rate: 20
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200

velocity_smoother:
  ros__parameters:
    use_sim_time: True
    smoothing_frequency: 20.0
    scale_velocities: False
    feedback: "OPEN_LOOP"
    # Slambot velocity limits
    max_velocity: [0.26, 0.0, 1.0]    # [linear_x, linear_y, angular_z]
    min_velocity: [-0.26, 0.0, -1.0]  # Allow reverse
    # Slambot acceleration limits //Change 
    max_accel: [2.5, 0.0, 3.2]        
    max_decel: [-2.5, 0.0, -3.2]      
    odom_topic: "odom"
    odom_duration: 0.1
    deadband_velocity: [0.0, 0.0, 0.0]
    velocity_timeout: 1.0
